// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=preemptermocks -destination=./mocks/preempter.mock.go
//

// Package preemptermocks is a generated GoMock package.
package preemptermocks

import (
	context "context"
	reflect "reflect"

	preempter "github.com/ecodeclub/ecron/internal/preempter"
	task "github.com/ecodeclub/ecron/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MockPreempter is a mock of Preempter interface.
type MockPreempter struct {
	ctrl     *gomock.Controller
	recorder *MockPreempterMockRecorder
}

// MockPreempterMockRecorder is the mock recorder for MockPreempter.
type MockPreempterMockRecorder struct {
	mock *MockPreempter
}

// NewMockPreempter creates a new mock instance.
func NewMockPreempter(ctrl *gomock.Controller) *MockPreempter {
	mock := &MockPreempter{ctrl: ctrl}
	mock.recorder = &MockPreempterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreempter) EXPECT() *MockPreempterMockRecorder {
	return m.recorder
}

// Preempt mocks base method.
func (m *MockPreempter) Preempt(ctx context.Context) (task.Task, preempter.CancelFn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preempt", ctx)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(preempter.CancelFn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Preempt indicates an expected call of Preempt.
func (mr *MockPreempterMockRecorder) Preempt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockPreempter)(nil).Preempt), ctx)
}
